[project]
name = "mermaid-render"
dynamic = ["version"]
description = "A comprehensive, production-ready Python library for generating Mermaid diagrams with clean APIs, validation, and multiple output formats"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "Max Qian", email = "astro_air@126.com"}
]
maintainers = [
    {name = "Max Qian", email = "astro_air@126.com"}
]
keywords = [
    "mermaid",
    "diagrams",
    "visualization",
    "flowchart",
    "sequence",
    "uml",
    "class-diagram",
    "state-diagram",
    "er-diagram",
    "gantt",
    "mindmap",
    "svg",
    "png",
    "pdf",
    "documentation",
    "architecture"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Intended Audience :: Information Technology",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Documentation",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Documentation",
    "Topic :: Multimedia :: Graphics",
    "Topic :: Multimedia :: Graphics :: Graphics Conversion",
    "Topic :: Text Processing :: Markup",
    "Topic :: Text Processing :: Markup :: HTML",
    "Topic :: Text Processing :: Markup :: XML",
    "Topic :: Utilities",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Typing :: Typed",
    "Framework :: FastAPI",
    "Framework :: Flask",
    "Framework :: Django",
    "Framework :: Jupyter",
    "Environment :: Console",
    "Environment :: Web Environment",
    "Natural Language :: English",
]
dependencies = [
    "mermaid-py>=0.8.0",
    "requests>=2.25.0",
    "jinja2>=3.0.0",
    "jsonschema>=4.0.0",
    "openai>=1.98.0",
    "anthropic>=0.60.0",
    "ipython>=8.18.1",
    "uvicorn>=0.35.0",
    "fastapi>=0.116.1",
    "cairosvg>=2.8.2",
    "fastmcp>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",  # Parallel test execution
    "pytest-mock>=3.10.0",  # Mocking utilities
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests>=2.25.0",
    "types-setuptools>=68.0.0",
    "types-redis>=4.6.0",
    "types-jsonschema>=4.25.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
    "safety>=2.0.0",
    "bandit>=1.7.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.10.0",
    "coverage[toml]>=7.0.0",
]
cache = [
    "redis>=4.0.0",
    "diskcache>=5.6.0",  # Alternative file-based cache
]
interactive = [
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.20.0",
    "websockets>=11.0.0",
    "jinja2>=3.0.0",
    "python-multipart>=0.0.6",  # For file uploads
]
ai = [
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    "spacy>=3.4.0",
    "networkx>=3.0.0",
    "tiktoken>=0.5.0",  # Token counting for AI APIs
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.0",
    "mkdocs-section-index>=0.3.0",
    "mkdocs-autorefs>=0.5.0",
    "pymdown-extensions>=10.0.0",
]
pdf = [
    "cairosvg>=2.7.0",  # SVG to PDF conversion
    "reportlab>=4.0.0",  # Alternative PDF generation
]
performance = [
    "cython>=3.0.0",  # Performance optimizations
    "numba>=0.58.0",  # JIT compilation
]
renderers = [
    "playwright>=1.40.0",  # Playwright renderer for high-fidelity rendering
    "graphviz>=0.20.0",  # Graphviz renderer for alternative diagram rendering
]
all = [
    "mermaid-render[cache,interactive,ai,docs,pdf,performance,renderers]"
]
# Build and packaging dependencies
build = [
    "build>=1.0.0",
    "twine>=4.0.0",
    "hatch>=1.9.0",
    "hatch-vcs>=0.3.0",
    "wheel>=0.42.0",
]
# Release and publishing dependencies
release = [
    "python-semantic-release>=8.0.0",
    "gitpython>=3.1.0",
    "packaging>=23.0",
]
# Security and compliance
security = [
    "safety>=2.0.0",
    "bandit[toml]>=1.7.0",
    "pip-audit>=2.6.0",
    "cyclonedx-bom>=4.0.0",  # SBOM generation
]
# Quality assurance
qa = [
    "pre-commit>=3.0.0",
    "commitizen>=3.0.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "coverage[toml]>=7.0.0",
]
# Docker and containerization
docker = [
    "docker>=6.0.0",
    "python-on-whales>=0.66.0",  # Docker Python API
]
# Monitoring and observability
monitoring = [
    "prometheus-client>=0.17.0",
    "structlog>=23.0.0",
    "sentry-sdk>=1.32.0",
]

[project.urls]
Homepage = "https://github.com/mermaid-render/mermaid-render"
Documentation = "https://mermaid-render.readthedocs.io"
Repository = "https://github.com/mermaid-render/mermaid-render"
Issues = "https://github.com/mermaid-render/mermaid-render/issues"
Discussions = "https://github.com/mermaid-render/mermaid-render/discussions"
Changelog = "https://github.com/mermaid-render/mermaid-render/blob/main/CHANGELOG.md"
"Bug Reports" = "https://github.com/mermaid-render/mermaid-render/issues/new?template=bug_report.yml"
"Feature Requests" = "https://github.com/mermaid-render/mermaid-render/issues/new?template=feature_request.yml"
"Security" = "https://github.com/mermaid-render/mermaid-render/security/policy"
"Funding" = "https://github.com/sponsors/mermaid-render"

[project.scripts]
mermaid-render = "mermaid_render.cli:main"
mermaid-render-mcp = "mermaid_render.mcp_server:main"

[project.entry-points."mermaid_render.plugins"]
# Plugin entry points for extensibility

[build-system]
requires = ["hatchling>=1.21.0", "hatch-vcs>=0.3.0"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0"

[tool.hatch.build.targets.wheel]
packages = ["mermaid_render"]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/examples",
    "/scripts",
    "/.pytest_cache",
    "/.mypy_cache",
    "/htmlcov",
    "*.pyc",
    "*.pyo",
    "*~",
    "*.orig",
    "*.rej",
    "__pycache__",
]

[tool.hatch.build.targets.sdist]
include = [
    "/mermaid_render",
    "/README.md",
    "/LICENSE",
    "/CHANGELOG.md",
    "/pyproject.toml",
]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/examples",
    "/scripts",
    "/site",
    "/.pytest_cache",
    "/.mypy_cache",
    "/htmlcov",
    "*.pyc",
    "*.pyo",
    "*~",
    "*.orig",
    "*.rej",
    "__pycache__",
]

[tool.hatch.build.hooks.vcs]
version-file = "mermaid_render/_version.py"

[tool.hatch.metadata]
allow-direct-references = true

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
# STRICTEST POSSIBLE MYPY CONFIGURATION
# This configuration enables all strict type checking flags for maximum type safety

python_version = "3.10"

# === STRICT MODE FLAGS (equivalent to --strict) ===
# These flags are enabled by --strict and provide comprehensive type checking
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
strict_bytes = true
extra_checks = true

# === ADDITIONAL STRICT FLAGS FOR MAXIMUM TYPE SAFETY ===
# Disallow Any types in all contexts
disallow_any_expr = true
disallow_any_decorated = true
disallow_any_explicit = true
disallow_any_unimported = true

# Strict None/Optional handling
no_implicit_optional = true
strict_optional = true

# Enhanced warnings and error detection
warn_no_return = true
warn_unreachable = true
warn_incomplete_stub = true

# Global type checking strictness
disallow_untyped_globals = true
disallow_redefinition = false  # Allow some flexibility for legitimate redefinitions

# Enhanced error reporting
show_error_context = true
show_column_numbers = true
show_error_end = true
show_error_codes = true
show_error_code_links = true
pretty = true
color_output = true
error_summary = true
show_absolute_path = false

# Files and directories to exclude from strict checking
exclude = [
    "^site/",
    "^docs/gen_ref_pages\\.py$",
    "^mermaid_render/interactive/tests/",
    "^build/",
    "^dist/",
    "^\\.venv/",
    "^\\.mypy_cache/"
]

# Handle optional dependencies
[[tool.mypy.overrides]]
module = [
    "mermaid.*",
    "redis.*",
    "openai.*",
    "anthropic.*",
    "playwright.*",
    "cairosvg.*",
    "weasyprint.*",
    "svglib.*",
    "graphviz.*",
    "fastapi.*",
    "uvicorn.*",
    "pytest.*",
    "fastmcp.*",
    "pydantic.*"
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests",
    "network: Tests requiring network access",
    "svg: SVG rendering tests",
    "browser: Browser compatibility tests",
    "error_handling: Error handling tests",
    "theme: Theme support tests",
    "export: Export functionality tests",
    "remote: Remote rendering tests",
    "performance: Performance tests",
]

[tool.coverage.run]
source = ["mermaid_render"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security linting configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "examples"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process_args

# Safety dependency checking
[tool.safety]
ignore = []  # Add CVE IDs to ignore if needed
output = "json"
full-report = true

# Semantic release configuration
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = ["mermaid_render/__init__.py:__version__"]
build_command = "python -m build"
dist_path = "dist/"
upload_to_pypi = true
upload_to_release = true
remove_dist = false
commit_author = "github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.develop]
match = "develop"
prerelease_token = "dev"
prerelease = true

[tool.semantic_release.changelog]
template_dir = "templates"
changelog_file = "CHANGELOG.md"
exclude_commit_patterns = [
    "^docs:",
    "^style:",
    "^refactor:",
    "^test:",
    "^chore:",
    "Merge pull request",
    "Merge branch",
]

[tool.semantic_release.commit_parser_options]
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# Commitizen configuration for conventional commits
[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.0"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "mermaid_render/__init__.py:__version__"
]



# Setuptools configuration for building
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["mermaid_render*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.setuptools.package-data]
mermaid_render = ["py.typed", "*.json", "*.yaml", "*.yml"]

[dependency-groups]
dev = [
    "mypy>=1.17.1",
    "pytest>=8.4.1",
    "types-jsonschema>=4.25.0.20250809",
    "types-redis>=4.6.0.20241004",
    "types-requests>=2.32.4.20250611",
    "types-setuptools>=80.9.0.20250801",
]

[[tool.mypy.overrides]]
module = ["untyped_package.*"]
follow_untyped_imports = true
