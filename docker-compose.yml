# Docker Compose configuration for Mermaid Render
# Supports development, testing, and production deployments

version: '3.8'

# =============================================================================
# Services
# =============================================================================
services:
  # Development service with hot reload and full tooling
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-dev}
    container_name: mermaid-render-dev
    ports:
      - "8000:8000"  # Main application
      - "8080:8080"  # Documentation server
    volumes:
      # Mount source code for hot reload
      - .:/app
      - /app/.venv  # Preserve virtual environment
      # Cache directories for better performance
      - dev-cache:/app/.cache
      - dev-mypy-cache:/app/.mypy_cache
      - dev-pytest-cache:/app/.pytest_cache
    environment:
      - PYTHONPATH=/app
      - MERMAID_RENDER_ENV=development
      - MERMAID_RENDER_DEBUG=true
      - MERMAID_RENDER_LOG_LEVEL=DEBUG
    networks:
      - mermaid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import mermaid_render; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Production web server
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: webserver
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    container_name: mermaid-render-web
    ports:
      - "80:8000"
    environment:
      - MERMAID_RENDER_ENV=production
      - MERMAID_RENDER_LOG_LEVEL=INFO
      - MERMAID_RENDER_CACHE_BACKEND=redis
      - MERMAID_RENDER_REDIS_URL=redis://redis:6379/0
    depends_on:
      - redis
    networks:
      - mermaid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Documentation server
  docs:
    build:
      context: .
      dockerfile: Dockerfile
      target: docs
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-latest}
    container_name: mermaid-render-docs
    ports:
      - "8080:8080"
    networks:
      - mermaid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis cache for production
  redis:
    image: redis:7-alpine
    container_name: mermaid-render-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - mermaid-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # Testing service for CI/CD
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: testing
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-test}
    container_name: mermaid-render-test
    environment:
      - PYTHONPATH=/app
      - MERMAID_RENDER_ENV=testing
    volumes:
      - ./coverage.xml:/app/coverage.xml
      - ./htmlcov:/app/htmlcov
    networks:
      - mermaid-network
    profiles:
      - testing

  # Security scanning service
  security:
    build:
      context: .
      dockerfile: Dockerfile
      target: security
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-security}
    container_name: mermaid-render-security
    volumes:
      - ./security-reports:/app/reports
    networks:
      - mermaid-network
    profiles:
      - security

  # Package builder service
  builder:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
      args:
        BUILD_DATE: ${BUILD_DATE:-}
        VCS_REF: ${VCS_REF:-}
        VERSION: ${VERSION:-build}
    container_name: mermaid-render-builder
    volumes:
      - ./dist:/app/artifacts
    networks:
      - mermaid-network
    profiles:
      - build

# =============================================================================
# Networks
# =============================================================================
networks:
  mermaid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# Volumes
# =============================================================================
volumes:
  # Development volumes
  dev-cache:
    driver: local
  dev-mypy-cache:
    driver: local
  dev-pytest-cache:
    driver: local
  
  # Production volumes
  redis-data:
    driver: local
  
  # Shared volumes
  static-files:
    driver: local
  logs:
    driver: local

# =============================================================================
# Environment Variables
# =============================================================================
# Create a .env file with the following variables:
#
# # Build information
# BUILD_DATE=2024-01-01T00:00:00Z
# VCS_REF=main
# VERSION=1.0.0
#
# # Application configuration
# MERMAID_RENDER_ENV=production
# MERMAID_RENDER_DEBUG=false
# MERMAID_RENDER_LOG_LEVEL=INFO
#
# # Cache configuration
# MERMAID_RENDER_CACHE_BACKEND=redis
# MERMAID_RENDER_REDIS_URL=redis://redis:6379/0
#
# # Security
# MERMAID_RENDER_SECRET_KEY=your-secret-key-here
#
# # External services
# OPENAI_API_KEY=your-openai-key
# ANTHROPIC_API_KEY=your-anthropic-key
